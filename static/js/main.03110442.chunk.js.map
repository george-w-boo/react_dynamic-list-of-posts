{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","getUserPosts","userId","getUsers","getPostDetails","postId","getPostComments","removeComment","commentId","method","addComment","newComment","headers","body","JSON","stringify","PostsList","props","selectedUserId","selectedPostId","handlePostListButton","useState","posts","setPosts","useEffect","postsFromApi","length","className","map","post","title","type","onClick","id","NewCommentForm","addAnotherComment","name","setName","email","setEmail","comment","setComment","onSubmit","event","preventDefault","value","onChange","target","placeholder","PostDetails","selectedPost","setSelectedPost","comments","setComments","isCommentNotHidden","setIsCommentNotHidden","Promise","all","selectedPostFromApi","commentsFromApi","removePostComment","commentsFromServer","anotherComment","prevComments","current","App","users","setUsers","setSelectedUserId","setSelectedPostId","usersFromApi","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03110442.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const removeComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","// import React from 'react';\nimport React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getPosts, getUserPosts } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  handlePostListButton: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, handlePostListButton } = props;\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const postsFromApi = await getPosts();\n\n      setPosts(postsFromApi);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const postsFromApi = selectedUserId ? (\n        await getUserPosts(selectedUserId)\n      ) : (\n        await await getPosts()\n      );\n\n      setPosts(postsFromApi);\n    })();\n  }, [selectedUserId]);\n\n  if (!posts.length) {\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        <div>The user has got no posts yet.</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                if (selectedPostId === post.id) {\n                  handlePostListButton(0);\n                } else {\n                  handlePostListButton(post.id);\n                }\n              }}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  addAnotherComment: (anotherComment: Partial<Comment>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addAnotherComment } = props;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n  };\n\n  const handleAddComment = (event: React.FormEvent) => {\n    event.preventDefault();\n    addAnotherComment({\n      postId,\n      name,\n      email,\n      body: comment,\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={(event) => setComment(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  getPostDetails,\n  getPostComments,\n  removeComment,\n  addComment,\n} from '../../api/api';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentNotHidden, setIsCommentNotHidden] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      const [selectedPostFromApi, commentsFromApi] = await Promise.all([\n        await getPostDetails(selectedPostId),\n        await getPostComments(selectedPostId),\n      ]);\n\n      setSelectedPost(selectedPostFromApi);\n      setComments(commentsFromApi);\n    })();\n  }, [selectedPostId]);\n\n  if (!selectedPost) {\n    return null;\n  }\n\n  const removePostComment = async (commentId: number) => {\n    await removeComment(commentId);\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  const addAnotherComment = async (anotherComment: Partial<Comment>) => {\n    const response = await addComment(anotherComment);\n    const newComment: Comment = await response.json();\n\n    setComments(prevComments => [...prevComments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => (\n              setIsCommentNotHidden(current => !current)\n            )}\n          >\n            {isCommentNotHidden ? 'Hide comments' : 'Show comments'}\n          </button>\n        ) : null}\n\n        {isCommentNotHidden && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => (\n                    removePostComment(comment.id)\n                  )}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={selectedPostId} addAnotherComment={addAnotherComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromApi = await getUsers();\n\n      setUsers(usersFromApi);\n    })();\n  }, []);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const handlePostListButton = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={handleSelect}>\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            handlePostListButton={handlePostListButton}\n          />\n        </div>\n\n        {selectedPostId ? (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        ) : (\n          null\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}